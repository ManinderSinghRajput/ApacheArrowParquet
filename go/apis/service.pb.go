//
//For a specified timeframe
//Total number of invoice_line_items
//Total quantity
//Total price
//Number of unique accounts
//Number of unique products

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: protos/service.proto

package apis

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CountAsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *CountAsReply) Reset() {
	*x = CountAsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAsReply) ProtoMessage() {}

func (x *CountAsReply) ProtoReflect() protoreflect.Message {
	mi := &file_protos_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAsReply.ProtoReflect.Descriptor instead.
func (*CountAsReply) Descriptor() ([]byte, []int) {
	return file_protos_service_proto_rawDescGZIP(), []int{0}
}

func (x *CountAsReply) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type GetOnBasisOfProductIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId int64 `protobuf:"varint,1,opt,name=productId,proto3" json:"productId,omitempty"`
}

func (x *GetOnBasisOfProductIdRequest) Reset() {
	*x = GetOnBasisOfProductIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOnBasisOfProductIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOnBasisOfProductIdRequest) ProtoMessage() {}

func (x *GetOnBasisOfProductIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOnBasisOfProductIdRequest.ProtoReflect.Descriptor instead.
func (*GetOnBasisOfProductIdRequest) Descriptor() ([]byte, []int) {
	return file_protos_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetOnBasisOfProductIdRequest) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

type GetTotalQuantityReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Quantity float64 `protobuf:"fixed64,1,opt,name=quantity,proto3" json:"quantity,omitempty"`
}

func (x *GetTotalQuantityReply) Reset() {
	*x = GetTotalQuantityReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTotalQuantityReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTotalQuantityReply) ProtoMessage() {}

func (x *GetTotalQuantityReply) ProtoReflect() protoreflect.Message {
	mi := &file_protos_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTotalQuantityReply.ProtoReflect.Descriptor instead.
func (*GetTotalQuantityReply) Descriptor() ([]byte, []int) {
	return file_protos_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetTotalQuantityReply) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

type GetTotalPriceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price float64 `protobuf:"fixed64,1,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *GetTotalPriceReply) Reset() {
	*x = GetTotalPriceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTotalPriceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTotalPriceReply) ProtoMessage() {}

func (x *GetTotalPriceReply) ProtoReflect() protoreflect.Message {
	mi := &file_protos_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTotalPriceReply.ProtoReflect.Descriptor instead.
func (*GetTotalPriceReply) Descriptor() ([]byte, []int) {
	return file_protos_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetTotalPriceReply) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_protos_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_protos_service_proto_rawDescGZIP(), []int{4}
}

var File_protos_service_proto protoreflect.FileDescriptor

var file_protos_service_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x61, 0x70, 0x69, 0x73, 0x22, 0x24, 0x0a, 0x0c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x3c, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x42, 0x61, 0x73, 0x69, 0x73,
	0x4f, 0x66, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64,
	0x22, 0x33, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x2a, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0xb1, 0x02, 0x0a, 0x07, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x41, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x0b,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x0b, 0x2e, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0b,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x12, 0x2e, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x3b, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0b, 0x2e, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x09,
	0x5a, 0x07, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_protos_service_proto_rawDescOnce sync.Once
	file_protos_service_proto_rawDescData = file_protos_service_proto_rawDesc
)

func file_protos_service_proto_rawDescGZIP() []byte {
	file_protos_service_proto_rawDescOnce.Do(func() {
		file_protos_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_service_proto_rawDescData)
	})
	return file_protos_service_proto_rawDescData
}

var file_protos_service_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_protos_service_proto_goTypes = []interface{}{
	(*CountAsReply)(nil),                 // 0: apis.CountAsReply
	(*GetOnBasisOfProductIdRequest)(nil), // 1: apis.GetOnBasisOfProductIdRequest
	(*GetTotalQuantityReply)(nil),        // 2: apis.GetTotalQuantityReply
	(*GetTotalPriceReply)(nil),           // 3: apis.GetTotalPriceReply
	(*Empty)(nil),                        // 4: apis.Empty
}
var file_protos_service_proto_depIdxs = []int32{
	4, // 0: apis.Service.GetTotalItems:input_type -> apis.Empty
	4, // 1: apis.Service.GetTotalQuantity:input_type -> apis.Empty
	4, // 2: apis.Service.GetTotalPrice:input_type -> apis.Empty
	4, // 3: apis.Service.GetUniqueAccountsCount:input_type -> apis.Empty
	4, // 4: apis.Service.GetUniqueProductsCount:input_type -> apis.Empty
	0, // 5: apis.Service.GetTotalItems:output_type -> apis.CountAsReply
	2, // 6: apis.Service.GetTotalQuantity:output_type -> apis.GetTotalQuantityReply
	3, // 7: apis.Service.GetTotalPrice:output_type -> apis.GetTotalPriceReply
	0, // 8: apis.Service.GetUniqueAccountsCount:output_type -> apis.CountAsReply
	0, // 9: apis.Service.GetUniqueProductsCount:output_type -> apis.CountAsReply
	5, // [5:10] is the sub-list for method output_type
	0, // [0:5] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_protos_service_proto_init() }
func file_protos_service_proto_init() {
	if File_protos_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOnBasisOfProductIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTotalQuantityReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTotalPriceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protos_service_proto_goTypes,
		DependencyIndexes: file_protos_service_proto_depIdxs,
		MessageInfos:      file_protos_service_proto_msgTypes,
	}.Build()
	File_protos_service_proto = out.File
	file_protos_service_proto_rawDesc = nil
	file_protos_service_proto_goTypes = nil
	file_protos_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceClient interface {
	GetTotalItems(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CountAsReply, error)
	GetTotalQuantity(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetTotalQuantityReply, error)
	GetTotalPrice(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetTotalPriceReply, error)
	GetUniqueAccountsCount(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CountAsReply, error)
	GetUniqueProductsCount(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CountAsReply, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) GetTotalItems(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CountAsReply, error) {
	out := new(CountAsReply)
	err := c.cc.Invoke(ctx, "/apis.Service/GetTotalItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetTotalQuantity(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetTotalQuantityReply, error) {
	out := new(GetTotalQuantityReply)
	err := c.cc.Invoke(ctx, "/apis.Service/GetTotalQuantity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetTotalPrice(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetTotalPriceReply, error) {
	out := new(GetTotalPriceReply)
	err := c.cc.Invoke(ctx, "/apis.Service/GetTotalPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetUniqueAccountsCount(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CountAsReply, error) {
	out := new(CountAsReply)
	err := c.cc.Invoke(ctx, "/apis.Service/GetUniqueAccountsCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetUniqueProductsCount(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CountAsReply, error) {
	out := new(CountAsReply)
	err := c.cc.Invoke(ctx, "/apis.Service/GetUniqueProductsCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the services API for Service service.
type ServiceServer interface {
	GetTotalItems(context.Context, *Empty) (*CountAsReply, error)
	GetTotalQuantity(context.Context, *Empty) (*GetTotalQuantityReply, error)
	GetTotalPrice(context.Context, *Empty) (*GetTotalPriceReply, error)
	GetUniqueAccountsCount(context.Context, *Empty) (*CountAsReply, error)
	GetUniqueProductsCount(context.Context, *Empty) (*CountAsReply, error)
}

// UnimplementedServiceServer can be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (*UnimplementedServiceServer) GetTotalItems(context.Context, *Empty) (*CountAsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalItems not implemented")
}
func (*UnimplementedServiceServer) GetTotalQuantity(context.Context, *Empty) (*GetTotalQuantityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalQuantity not implemented")
}
func (*UnimplementedServiceServer) GetTotalPrice(context.Context, *Empty) (*GetTotalPriceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalPrice not implemented")
}
func (*UnimplementedServiceServer) GetUniqueAccountsCount(context.Context, *Empty) (*CountAsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUniqueAccountsCount not implemented")
}
func (*UnimplementedServiceServer) GetUniqueProductsCount(context.Context, *Empty) (*CountAsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUniqueProductsCount not implemented")
}

func RegisterServiceServer(s *grpc.Server, srv ServiceServer) {
	s.RegisterService(&_Service_serviceDesc, srv)
}

func _Service_GetTotalItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetTotalItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apis.Service/GetTotalItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetTotalItems(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetTotalQuantity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetTotalQuantity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apis.Service/GetTotalQuantity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetTotalQuantity(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetTotalPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetTotalPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apis.Service/GetTotalPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetTotalPrice(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetUniqueAccountsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetUniqueAccountsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apis.Service/GetUniqueAccountsCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetUniqueAccountsCount(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetUniqueProductsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetUniqueProductsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apis.Service/GetUniqueProductsCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetUniqueProductsCount(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "apis.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTotalItems",
			Handler:    _Service_GetTotalItems_Handler,
		},
		{
			MethodName: "GetTotalQuantity",
			Handler:    _Service_GetTotalQuantity_Handler,
		},
		{
			MethodName: "GetTotalPrice",
			Handler:    _Service_GetTotalPrice_Handler,
		},
		{
			MethodName: "GetUniqueAccountsCount",
			Handler:    _Service_GetUniqueAccountsCount_Handler,
		},
		{
			MethodName: "GetUniqueProductsCount",
			Handler:    _Service_GetUniqueProductsCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/service.proto",
}
